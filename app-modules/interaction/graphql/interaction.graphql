union Interactable = Student | Prospect

type Interaction
    @model(class: "AdvisingApp\\Interaction\\Models\\Interaction") {
    "Unique primary key."
    id: ID!

    "The subject of the interaction."
    subject: String!

    "The description of the interaction."
    description: String!

    "The User related to the interaction."
    user: User @belongsTo

    "The Interactable related to the interaction."
    interactable: Interactable @morphTo

    "The type of interaction."
    type: InteractionType @belongsTo

    "The relation of the interaction."
    relation: InteractionRelation @belongsTo

    "The campaign of the interaction."
    campaign: InteractionCampaign @belongsTo

    "The driver of the interaction."
    driver: InteractionDriver @belongsTo

    "The status of the interaction."
    status: InteractionStatus @belongsTo

    "The outcome of the interaction."
    outcome: InteractionOutcome @belongsTo

    "The division of the interaction."
    division: Division @belongsTo

    "The start datetime of the interaction."
    start_datetime: DateTime!

    "The end datetime of the interaction."
    end_datetime: DateTime

    "The created datetime of the interaction."
    created_at: DateTime

    "The updated datetime of the interaction."
    updated_at: DateTime
}

# TODO: Query and Mutate

extend type Query {
    interaction(
        "Search by primary key."
        id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

        "Search by email address."
        email: String
        @eq
        @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple interactions."
    interactions: [Interaction!]! @paginate
}

#import ./interaction-campaign.graphql
#import ./interaction-driver.graphql
#import ./interaction-outcome.graphql
#import ./interaction-relation.graphql
#import ./interaction-status.graphql
#import ./interaction-type.graphql
