#TODO: This can be basically any model that supports auditing
union Auditable = Student
    | Prospect
    | User
    | SystemUser
    | ConsentAgreement

type Audit @model(class: "AdvisingApp\\Audit\\Models\\Audit") {
    "Unique primary key."
    id: UUID!

    change_agent_type: String

    change_agent_id: UUID

    event: String!

    #    auditable_type: String!

    #    auditable_id: String!

    old_values: JSON

    new_values: JSON

    url: String

    ip_address: String

    user_agent: String

    tags: String

    created_at: DateTime

    updated_at: DateTime

    auditable: Auditable @morphTo

    user: Authenticatable @morphTo
}
#

input AuditableablesQuery {
    student: StudentsQuery
    prospect: ProspectsQuery
    user: UsersQuery
    system_user: SystemUsersQuery
}

input AuthenticatablesQuery {
    user: UsersQuery
    system_user: SystemUsersQuery
}

input AuditsQuery {
    id: UUID

    change_agent_type: String

    change_agent_id: UUID

    event: String

    #    auditable_type: String

    #    auditable_id: String

    old_values: JSON

    new_values: JSON

    url: String

    ip_address: String

    user_agent: String

    tags: String

    created_at: DateTime

    updated_at: DateTime

    auditable: AuditableablesQuery @morphToRelation

    user: AuthenticatablesQuery @morphToRelation
}

type AuditQueries {
    find(
        id: UUID! @whereKey @rules(apply: ["required", "uuid", "exists:audits"])
    ): Audit @find @canResolved(ability: "view")

    list(where: AuditsQuery @searchBy): [Audit!]!
        @paginate
        @canModel(ability: "viewAny")
}

extend type Query {
    audit: AuditQueries! @namespaced
}
