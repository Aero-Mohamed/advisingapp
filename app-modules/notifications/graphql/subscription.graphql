type UserSubscription
    @model(class: "AdvisingApp\\Notifications\\Models\\Subscription") {
    "Unique primary key."
    id: ID!
    "The user related to this subscription."
    user: User! @belongsTo
    "The subscribable the user is subscribed to."
    subscribable: Educatable! @morphTo
    "The created date of the subscription."
    created_at: DateTime
    "The updated date of the subscription."
    updated_at: DateTime
}

extend type Query {
    "Get a subscription by its primary key."
    userSubscription(
        "Search by primary key."
        id: ID! @whereKey
    ): UserSubscription @find @canResolved(ability: "view")

    "Get all subscriptions."
    userSubscriptions: [UserSubscription!]!
        @paginate
        @canModel(ability: "viewAny")
}

extend type Mutation {
    "Create a new subscription."
    createUserSubscription(
        "The user to subscribe."
        user_id: ID! @rules(apply: ["required", "exists:users,id"])

        "The subscribable to subscribe to."
        subscribable_id: ID! @rules(apply: ["required"])

        "The type of subscribable to subscribe to."
        subscribable_type: String!
            @rules(apply: ["required", "in:student,prospect"])
    ): UserSubscription! @create @canModel(ability: "create")

    "Delete an existing subscription."
    deleteUserSubscription(
        "The primary key of the subscription."
        id: ID! @whereKey
    ): UserSubscription @delete @canFind(ability: "delete", find: "id")
}
