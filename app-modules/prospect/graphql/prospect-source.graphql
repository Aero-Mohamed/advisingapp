type ProspectSource
    @model(class: "AdvisingApp\\Prospect\\Models\\ProspectSource") {
    "Unique primary key."
    id: UUID!

    "The name of the prospect driver."
    name: String!

    "Prospects related to this prospect driver."
    prospects: [Prospect!] @hasMany

    "The created date of the prospect driver."
    created_at: DateTime

    "The updated date of the prospect driver."
    updated_at: DateTime

    "The deleted date of the prospect driver."
    deleted_at: DateTime
}

input ProspectSourcesQuery {
    "The unique primary key of the prospect source."
    id: UUID

    "The name of the prospect source."
    name: String

    "The prospects related to this prospect source."
    prospects: ProspectsQuery

    "The created date of the prospect source."
    created_at: DateTime

    "The updated date of the prospect source."
    updated_at: DateTime

    "The deleted date of the prospect source."
    deleted_at: DateTime
}

type ProspectSourceQueries {
    "Get a specific prospect source by ID."
    find(
        id: UUID!
            @whereKey
            @rules(apply: ["required", "uuid", "exists:prospect_sources"])
    ): ProspectSource @find @softDeletes @canResolved(ability: "view")

    "List multiple prospects sources."
    list(
        "Filter by the prospect sources attributes and relations."
        where: ProspectSourcesQuery @searchBy
    ): [ProspectSource!]! @paginate @softDeletes @canModel(ability: "viewAny")
}

extend type Query {
    prospectSource: ProspectSourceQueries! @namespaced
}

input CreateProspectSourceInput {
    "The name of the prospect source."
    name: String!
        @rules(
            apply: [
                "required"
                "string"
                "max:255"
                "unique:prospect_sources,name"
            ]
        )
}

input UpdateProspectSourceInput {
    "The name of the prospect source."
    name: String
        @rules(apply: ["string", "max:255", "unique:prospect_sources,name"])
}

type ProspectSourceMutations {
    "Create an prospect source."
    create(input: CreateProspectSourceInput! @spread): ProspectSource!
        @create
        @canModel(ability: "create")

    "Update an existing prospect source."
    update(
        "The identifier of the prospect source you would like to update."
        id: UUID!
            @whereKey
            @rules(apply: ["required", "uuid", "exists:prospect_sources"])

        "The fields you would like to update."
        input: UpdateProspectSourceInput! @spread
    ): ProspectSource! @canFind(ability: "update", find: "id") @update

    "Delete an existing prospect source."
    delete(
        "The identifier of the prospect source you would like to delete."
        id: UUID!
            @whereKey
            @rules(apply: ["required", "uuid", "exists:prospect_sources"])
    ): ProspectSource @canFind(ability: "delete", find: "id") @delete
}

extend type Mutation {
    prospectSource: ProspectSourceMutations! @namespaced
}
