type Prospect @model(class: "AdvisingApp\\Prospect\\Models\\Prospect") {
    "Unique primary key."
    id: UUID!

    "The status of the prospect."
    status: String!

    "The first name of the prospect."
    first_name: String!

    "The last name of the prospect."
    last_name: String!

    "The full name of the prospect."
    full_name: String!

    "The preferred name of the prospect."
    preferred: String

    "The description of the prospect."
    description: String

    "The email of the prospect."
    email: String

    "The email 2 of the prospect."
    email_2: String

    "The mobile number of the prospect."
    mobile: String

    "The phone number of the prospect."
    phone: String

    "If the prospect is opted out of SMS messages."
    sms_opt_out: Boolean

    "If the prospect's email bounces."
    email_bounce: Boolean

    "The address of the prospect."
    address: String

    "The address 2 of the prospect."
    address_2: String

    "The birthdate of the prospect."
    birthdate: DateTime

    "The High School graduation year of the prospect."
    hs_grad_year: String

    "The created date of the prospect."
    created_at: DateTime

    "The updated date of the prospect."
    updated_at: DateTime

    "The deleted date of the prospect."
    deleted_at: DateTime
}

input ProspectsQuery {
    id: UUID!
    first_name: String!
    last_name: String!
    full_name: String!
}

type ProspectQueries {
    "Find a single prospect by an identifying attribute."
    find(
        "The value of the attribute to match."
        id: UUID!
            @whereKey
            @rules(apply: ["required", "uuid", "exists:prospects"])
    ): Prospect @find @canResolved(ability: "view")

    "List multiple prospects."
    list(where: ProspectsQuery @searchBy): [Prospect!]!
        @paginate
        @canModel(ability: "viewAny")
}

extend type Query {
    prospect: ProspectQueries! @namespaced
}

input UpdateProspectInput {
    "The first name of the prospect."
    first_name: String @rules(apply: ["string", "max:255"])

    "The last name of the prospect."
    last_name: String @rules(apply: ["string", "max:255"])

    "The full name of the prospect."
    full_name: String @rules(apply: ["string", "max:255"])
}

input CreateProspectInput {
    "The first name of the prospect."
    first_name: String! @rules(apply: ["required", "string", "max:255"])

    "The last name of the prospect."
    last_name: String! @rules(apply: ["required", "string", "max:255"])

    "The full name of the prospect."
    full_name: String! @rules(apply: ["required", "string", "max:255"])
}

type ProspectMutations {
    "Create an prospect."
    create(input: CreateProspectInput! @spread): Prospect!
        @create
        @canModel(ability: "create")

    "Update an prospect."
    update(
        "The identifier of the prospect you would like to update."
        id: UUID!
            @whereKey
            @rules(apply: ["required", "uuid", "exists:prospects"])

        "The fields you would like to update."
        input: UpdateProspectInput! @spread
    ): Prospect! @canFind(ability: "update", find: "id") @update

    "Delete an prospect."
    delete(
        "The identifier of the prospect you would like to delete."
        id: UUID!
            @whereKey
            @rules(apply: ["required", "uuid", "exists:prospects"])
    ): Prospect @canFind(ability: "delete", find: "id") @delete
}

extend type Mutation {
    prospect: ProspectMutations! @namespaced
}
