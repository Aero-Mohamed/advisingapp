type UserCareTeam @model(class: "AdvisingApp\\CareTeam\\Models\\CareTeam") {
    "Unique primary key."
    id: UUID!

    "The User related to this care team assignment."
    user: User! @belongsTo

    "The Educatable in the user's care team."
    educatable: Educatable! @morphTo

    "The created datetime of the care team assignment."
    created_at: DateTime

    "The updated datetime of the care team assignment."
    updated_at: DateTime
}

input UserCareTeamEducatablesQuery {
    student: StudentQuery
    prospect: ProspectQuery
}

input UserCareTeamsQuery {
    id: ID
    user: UserQuery
    educatable: UserCareTeamEducatablesQuery @morphToRelation
    educatable_id: ID
    educatable_type: EducatableType
    created_at: DateTime
    updated_at: DateTime
}

extend type Query {
    "Find a single care team by an identifying attribute."
    userCareTeam(
        "The value of the attribute to match."
        id: UUID! @whereKey @rules(apply: ["required", "uuid", "exists:care_teams"])
    ): UserCareTeam
        @find
        @canResolved(ability: "view")


    "List multiple care team assignments."
    userCareTeams(
        where: UserCareTeamsQuery @searchBy
    ): [UserCareTeam!]!
        @paginate
        @canModel(ability: "viewAny")
}

input CreateUserCareTeamInput {
    "The User to add to the Care Team of."
    user_id: UUID!
        @rules(
            apply: [
                "required"
                "exists:users,id"
                "AdvisingApp\\CareTeam\\Rules\\UniqueCareTeamRule"
            ]
        )

    "The Educatable to add to the care team."
    educatable_id: EducatableId!
        @rules(
            apply: [
                "required"
                "AdvisingApp\\CareTeam\\Rules\\EducatableIdExistsRule"
            ]
        )

    "The type of Educatable to add to the care team."
    educatable_type: EducatableType!
        @rules(apply: ["required", "in:student,prospect"])
}

extend type Mutation {
    "Create a new care team assignment."
    createUserCareTeam(
        input: CreateUserCareTeamInput! @spread
    ): UserCareTeam! @create @canModel(ability: "create")

    "Delete an existing care team assignment."
    deleteUserCareTeam(
        "The primary key of the care team assignment."
        id: UUID! @whereKey @rules(apply: ["required", "uuid", "exists:care_teams"])
    ): UserCareTeam @delete @canFind(ability: "delete", find: "id")
}
