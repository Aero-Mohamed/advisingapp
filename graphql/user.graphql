extend type Query {
    "Find a single user by an identifying attribute."
    user(
        "Search by primary key."
        id: UUID
            @eq
            @rules(apply: ["prohibits:email", "required_without:email"])

        "Search by email address."
        email: String
            @eq
            @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find @canResolved(ability: "view")

    "List multiple users."
    users(
        "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
        name: String @where(operator: "like")
    ): [User!]! @paginate @canModel(ability: "viewAny")
}

input UserQuery {
    "Unique primary key."
    id: UUID!

    "Users email address."
    email: String!
}

"Account of a person who utilizes this application."
type User @model(class: "user") {
    "Unique primary key."
    id: UUID!

    "Unique email address."
    email: String!
}
