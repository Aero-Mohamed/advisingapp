spectaql:
#  logoFile: ./test/fixtures/logo.png
#  faviconFile: ./test/fixtures/favicon.png
  displayAllServers: true
  targetDir: ./storage/app/api-docs
  oneFile: true
  themeDir: spectaql

introspection:
  removeTrailingPeriodFromDescriptions: false
  schemaFile: ./storage/app/public/lighthouse-schema.graphql
#  metadataFile: ./examples/data/metadata.json
#  dynamicExamplesProcessingModule: ./examples/customizations/examples
  queryNameStrategy: capitalizeFirst
  fieldExpansionDepth: 2

  spectaqlDirective:
    enable: true

extensions:
  graphqlScalarExamples: true

info:
  title: Advising App™ by Canyon GBS™ API Documentation
  description: This documentation contains reference information for using our GraphQL API capabilities to programmatically interface with your instance of Advising App™.
  termsOfService: https://canyongbs.com/legal-terms/terms-of-use/
  contact:
    name: Support Team
    url: https://advising.app/support/
    email: support@canyongbs.com
  license:
    name: Elastic License 2.0
    url: https://github.com/canyongbs/advisingapp/blob/main/LICENSE
  x-introItems:
    - title: Authorization
      description: Add additional details for authentication. Supports `markdown`, more sections can be added.
    - title: Querying the same field for different union types
      description: |
        When querying a field that returns a union type, you may get back an error "conflict because they return conflicting types". For example, if you query for interactable on a union type of `Student | Prospect` and request `full_name` you may get back this error.
        
        This is due to the fields having different type definitions. In order to get around this you will need to define an alias for the field you are querying.
        
        For example, you can query for `student_full_name: full_name` and `prospect_full_name: full_name` to get back the data you are looking for.


servers:
  - url: https://yoursubdomain.advising.app/graphql
    description: Every customer of Advising App™ will have their own unique subdomain. Update the URL above with your subdomain unique to your college or university to identify your API endpoint.
    production: true
    headers:
      - name: Authorization
        example: Bearer <YOUR_TOKEN_HERE>
        comment: The API token generated for a System User within the dashboard.